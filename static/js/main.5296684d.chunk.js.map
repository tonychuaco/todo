{"version":3,"sources":["TasksList.js","ToDoForm.js","App.js","serviceWorker.js","index.js"],"names":["TasksList","props","listItems","todo","map","item","key","taskId","taskName","type","onClick","deleteTask","updateTask","ToDoForm","formInput","onSubmit","input","addItem","htmlFor","onChange","handleChange","name","placeholder","ToDoList","event","console","log","preventDefault","task","state","currentToDo","setState","todos","target","value","temp","arr","push","className","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wMAoBeA,EAhBG,SAACC,GACjB,IAAMC,EAAYD,EAAME,KAAKC,KAAI,SAACC,GAAD,OAC/B,wBAAIC,IAAKD,EAAKE,QACXF,EAAKG,SACN,4BAAQC,KAAK,SAASC,QAAS,kBAAMT,EAAMU,WAAWN,KAAtD,UAGA,4BAAQI,KAAK,SAASC,QAAS,kBAAMT,EAAMW,WAAWP,KAAtD,cAMJ,OAAO,4BAAKH,ICICW,EAjBE,SAACZ,GAChB,IAAMa,EACJ,0BAAMC,SAAU,SAACC,GAAD,OAAWf,EAAMgB,QAAQD,KACvC,2BAAOE,QAAQ,YAAf,cACA,2BACEC,SAAU,SAACH,GAAD,OAAWf,EAAMmB,aAAaJ,IACxCK,KAAK,WACLZ,KAAK,OACLa,YAAY,oBAEd,4BAAQb,KAAK,UAAb,aAIJ,OAAO,6BAAMK,ICgFAS,E,kDA5Fb,aAAe,IAAD,8BACZ,gBASFN,QAAU,SAACO,GACTC,QAAQC,IAAI,SACZF,EAAMG,iBACN,IAAMC,EAAO,CACXrB,OAAQ,EAAKsB,MAAMtB,OACnBC,SAAU,EAAKqB,MAAMC,aAGQ,KAA3B,EAAKD,MAAMC,aACb,EAAKC,SAAS,CACZxB,OAAQ,EAAKsB,MAAMtB,OAAS,EAC5ByB,MAAM,GAAD,mBAAM,EAAKH,MAAMG,OAAjB,CAAwBJ,IAC7BE,YAAa,MAtBL,EA2BdV,aAAe,SAACI,GAEd,EAAKO,SAAS,CACZD,YAAaN,EAAMS,OAAOC,SA9BhB,EAmCdvB,WAAa,SAACa,GACZ,IAAIW,EAAO,EAAKN,MAAMG,MAClBI,EAAM,GACV,IAAK,IAAIR,KAAQO,EACXA,EAAKP,KAAUJ,GAGjBY,EAAIC,KAAKF,EAAKP,IAGlBO,EAAOC,EAEP,EAAKL,SAAS,CACZC,MAAOG,KAhDG,EAqDdvB,WAAa,SAACY,GACZ,IAAIM,EAAc,EAAKD,MAAMC,YACzBK,EAAO,EAAKN,MAAMG,MACtB,IAAK,IAAIJ,KAAQO,EACXA,EAAKP,KAAUJ,IACjBW,EAAKP,GAAMpB,SAAWsB,GAI1B,EAAKC,SAAS,CACZC,MAAOG,KA7DT,EAAKN,MAAQ,CACXG,MAAO,GACPF,YAAa,GACbvB,OAAQ,GALE,E,qDAoEZ,OACE,yBAAK+B,UAAU,aAWb,kBAAC,EAAD,CAAUrB,QAASsB,KAAKtB,QAASG,aAAcmB,KAAKnB,eAEpD,kBAAC,EAAD,CACEjB,KAAMoC,KAAKV,MAAMG,MACjBrB,WAAY4B,KAAK5B,WACjBC,WAAY2B,KAAK3B,kB,GAtFJ4B,aCOHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.5296684d.chunk.js","sourcesContent":["import React from \"react\";\n\n// Then create a TasksList component that accepts props to build out the list instead of doing it in our main app\n\nconst TasksList = (props) => {\n  const listItems = props.todo.map((item) => (\n    <li key={item.taskId}>\n      {item.taskName}\n      <button type=\"button\" onClick={() => props.deleteTask(item)}>\n        Delete\n      </button>\n      <button type=\"button\" onClick={() => props.updateTask(item)}>\n        Update\n      </button>\n    </li>\n  ));\n\n  return <ul>{listItems}</ul>;\n};\n\nexport default TasksList;\n","import React from \"react\";\n\n// Then create a ToDoForm component that accepts props to fire the correct methods when the corresponding event listeners are fired.\n\nconst ToDoForm = (props) => {\n  const formInput = (\n    <form onSubmit={(input) => props.addItem(input)}>\n      <label htmlFor=\"taskName\">Task Name:</label>\n      <input\n        onChange={(input) => props.handleChange(input)}\n        name=\"taskName\"\n        type=\"text\"\n        placeholder=\"Add to do here!\"\n      />\n      <button type=\"submit\">Add Task</button>\n    </form>\n  );\n\n  return <div>{formInput}</div>;\n};\n\nexport default ToDoForm;\n","import React, { Component } from \"react\";\n\nimport TasksList from \"./TasksList\";\nimport ToDoForm from \"./ToDoForm\";\n\nclass ToDoList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [],\n      currentToDo: \"\",\n      taskId: 0,\n    };\n  }\n\n  // Complete the handleChange and the addItem methods\n  addItem = (event) => {\n    console.log(\"Found\");\n    event.preventDefault();\n    const task = {\n      taskId: this.state.taskId,\n      taskName: this.state.currentToDo,\n    };\n\n    if (this.state.currentToDo !== \"\") {\n      this.setState({\n        taskId: this.state.taskId + 1,\n        todos: [...this.state.todos, task],\n        currentToDo: \"\",\n      });\n    }\n  };\n\n  handleChange = (event) => {\n    // console.log(event.target.value);\n    this.setState({\n      currentToDo: event.target.value,\n    });\n  };\n\n  // Then add a delete method that removes any todo in the list\n  deleteTask = (event) => {\n    let temp = this.state.todos;\n    let arr = [];\n    for (var task in temp) {\n      if (temp[task] === event) {\n        continue;\n      } else {\n        arr.push(temp[task]);\n      }\n    }\n    temp = arr;\n\n    this.setState({\n      todos: temp,\n    });\n  };\n\n  // Complete an Update method and add an Update button to each list item that will allow you to update the individual item.\n  updateTask = (event) => {\n    let currentToDo = this.state.currentToDo;\n    let temp = this.state.todos;\n    for (var task in temp) {\n      if (temp[task] === event) {\n        temp[task].taskName = currentToDo;\n      }\n    }\n\n    this.setState({\n      todos: temp,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        {/* <form onSubmit={this.addItem}>\n          <label htmlFor=\"taskName\">Task Name:</label>\n          <input\n            onChange={this.handleChange}\n            name=\"taskName\"\n            type=\"text\"\n            placeholder=\"Add to do here!\"\n          />\n          <button type=\"submit\">Add Task</button>\n        </form> */}\n        <ToDoForm addItem={this.addItem} handleChange={this.handleChange} />\n\n        <TasksList\n          todo={this.state.todos}\n          deleteTask={this.deleteTask}\n          updateTask={this.updateTask}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ToDoList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}